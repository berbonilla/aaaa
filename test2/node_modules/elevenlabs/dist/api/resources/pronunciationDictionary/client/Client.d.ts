/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import * as ElevenLabs from "../../../index";
export declare namespace PronunciationDictionary {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class PronunciationDictionary {
    protected readonly _options: PronunciationDictionary.Options;
    constructor(_options?: PronunciationDictionary.Options);
    /**
     * Creates a new pronunciation dictionary from a lexicon .PLS file
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.addFromFile(fs.createReadStream("/path/to/your/file"), {
     *         name: "name"
     *     })
     */
    addFromFile(file: File | fs.ReadStream | undefined, request: ElevenLabs.BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost, requestOptions?: PronunciationDictionary.RequestOptions): Promise<ElevenLabs.AddPronunciationDictionaryResponseModel>;
    /**
     * Add rules to the pronunciation dictionary
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.addRulesToThePronunciationDictionary("pronunciation_dictionary_id", {
     *         rules: []
     *     })
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.addRulesToThePronunciationDictionary("string", {
     *         rules: []
     *     })
     */
    addRulesToThePronunciationDictionary(pronunciationDictionaryId: string, request: ElevenLabs.PronunciationDictionary, requestOptions?: PronunciationDictionary.RequestOptions): Promise<ElevenLabs.AddPronunciationDictionaryRulesResponseModel>;
    /**
     * Remove rules from the pronunciation dictionary
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.removeRulesFromThePronunciationDictionary("pronunciation_dictionary_id", {
     *         rule_strings: ["rule_strings"]
     *     })
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.removeRulesFromThePronunciationDictionary("string", {
     *         rule_strings: ["rule_strings"]
     *     })
     */
    removeRulesFromThePronunciationDictionary(pronunciationDictionaryId: string, request: ElevenLabs.BodyRemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPost, requestOptions?: PronunciationDictionary.RequestOptions): Promise<ElevenLabs.RemovePronunciationDictionaryRulesResponseModel>;
    /**
     * Get PLS file with a pronunciation dictionary version rules
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.getPlsFileWithAPronunciationDictionaryVersionRules("string", "string")
     */
    getPlsFileWithAPronunciationDictionaryVersionRules(dictionaryId: string, versionId: string, requestOptions?: PronunciationDictionary.RequestOptions): Promise<string>;
    /**
     * Get metadata for a pronunciation dictionary
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.get("pronunciation_dictionary_id")
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.get("string")
     */
    get(pronunciationDictionaryId: string, requestOptions?: PronunciationDictionary.RequestOptions): Promise<ElevenLabs.GetPronunciationDictionaryMetadataResponse>;
    /**
     * Get a list of the pronunciation dictionaries you have access to and their metadata
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.getAll()
     *
     * @example
     *     await elevenLabs.pronunciationDictionary.getAll({
     *         cursor: "string",
     *         page_size: 1
     *     })
     */
    getAll(request?: ElevenLabs.PronunciationDictionaryGetAllRequest, requestOptions?: PronunciationDictionary.RequestOptions): Promise<ElevenLabs.GetPronunciationDictionariesMetadataResponseModel>;
}
